// Code generated by protoc-gen-go. DO NOT EDIT.
// source: exchange.proto

package exchange

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Command int32

const (
	Command_ADD     Command = 0
	Command_DELETE  Command = 1
	Command_REPLACE Command = 2
	Command_CANCEL  Command = 3
)

var Command_name = map[int32]string{
	0: "ADD",
	1: "DELETE",
	2: "REPLACE",
	3: "CANCEL",
}

var Command_value = map[string]int32{
	"ADD":     0,
	"DELETE":  1,
	"REPLACE": 2,
	"CANCEL":  3,
}

func (x Command) String() string {
	return proto.EnumName(Command_name, int32(x))
}

func (Command) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{0}
}

type OrderType int32

const (
	OrderType_LIMIT               OrderType = 0
	OrderType_MARKET              OrderType = 1
	OrderType_STOP                OrderType = 2
	OrderType_STOP_LIMIT          OrderType = 3
	OrderType_TRAILING_STOP       OrderType = 4
	OrderType_TRAILING_STOP_LIMIT OrderType = 5
)

var OrderType_name = map[int32]string{
	0: "LIMIT",
	1: "MARKET",
	2: "STOP",
	3: "STOP_LIMIT",
	4: "TRAILING_STOP",
	5: "TRAILING_STOP_LIMIT",
}

var OrderType_value = map[string]int32{
	"LIMIT":               0,
	"MARKET":              1,
	"STOP":                2,
	"STOP_LIMIT":          3,
	"TRAILING_STOP":       4,
	"TRAILING_STOP_LIMIT": 5,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{1}
}

type OrderTimeInForce int32

const (
	OrderTimeInForce_GTC OrderTimeInForce = 0
	OrderTimeInForce_IOC OrderTimeInForce = 1
	OrderTimeInForce_FOK OrderTimeInForce = 2
)

var OrderTimeInForce_name = map[int32]string{
	0: "GTC",
	1: "IOC",
	2: "FOK",
}

var OrderTimeInForce_value = map[string]int32{
	"GTC": 0,
	"IOC": 1,
	"FOK": 2,
}

func (x OrderTimeInForce) String() string {
	return proto.EnumName(OrderTimeInForce_name, int32(x))
}

func (OrderTimeInForce) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{2}
}

type Side int32

const (
	Side_BID Side = 0
	Side_ASK Side = 1
)

var Side_name = map[int32]string{
	0: "BID",
	1: "ASK",
}

var Side_value = map[string]int32{
	"BID": 0,
	"ASK": 1,
}

func (x Side) String() string {
	return proto.EnumName(Side_name, int32(x))
}

func (Side) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{3}
}

type OrderMessage struct {
	// Add, Delete, Cancel, Replace, etc
	Command              Command          `protobuf:"varint,1,opt,name=command,proto3,enum=exchange.Command" json:"command,omitempty"`
	OrderType            OrderType        `protobuf:"varint,2,opt,name=orderType,proto3,enum=exchange.OrderType" json:"orderType,omitempty"`
	OrderSide            Side             `protobuf:"varint,3,opt,name=orderSide,proto3,enum=exchange.Side" json:"orderSide,omitempty"`
	OrderTimeInForce     OrderTimeInForce `protobuf:"varint,4,opt,name=orderTimeInForce,proto3,enum=exchange.OrderTimeInForce" json:"orderTimeInForce,omitempty"`
	Id                   uint64           `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	SymbolId             uint64           `protobuf:"varint,6,opt,name=symbolId,proto3" json:"symbolId,omitempty"`
	Price                uint64           `protobuf:"varint,7,opt,name=price,proto3" json:"price,omitempty"`
	StopPrice            uint64           `protobuf:"varint,8,opt,name=stopPrice,proto3" json:"stopPrice,omitempty"`
	TrailingAmount       uint64           `protobuf:"varint,9,opt,name=trailingAmount,proto3" json:"trailingAmount,omitempty"`
	LastExecutedPrice    uint64           `protobuf:"varint,10,opt,name=lastExecutedPrice,proto3" json:"lastExecutedPrice,omitempty"`
	Quantity             uint64           `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity,omitempty"`
	OpenQuantity         uint64           `protobuf:"varint,12,opt,name=openQuantity,proto3" json:"openQuantity,omitempty"`
	LastExecutedQuantity uint64           `protobuf:"varint,13,opt,name=lastExecutedQuantity,proto3" json:"lastExecutedQuantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OrderMessage) Reset()         { *m = OrderMessage{} }
func (m *OrderMessage) String() string { return proto.CompactTextString(m) }
func (*OrderMessage) ProtoMessage()    {}
func (*OrderMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{0}
}

func (m *OrderMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderMessage.Unmarshal(m, b)
}
func (m *OrderMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderMessage.Marshal(b, m, deterministic)
}
func (m *OrderMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderMessage.Merge(m, src)
}
func (m *OrderMessage) XXX_Size() int {
	return xxx_messageInfo_OrderMessage.Size(m)
}
func (m *OrderMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OrderMessage proto.InternalMessageInfo

func (m *OrderMessage) GetCommand() Command {
	if m != nil {
		return m.Command
	}
	return Command_ADD
}

func (m *OrderMessage) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_LIMIT
}

func (m *OrderMessage) GetOrderSide() Side {
	if m != nil {
		return m.OrderSide
	}
	return Side_BID
}

func (m *OrderMessage) GetOrderTimeInForce() OrderTimeInForce {
	if m != nil {
		return m.OrderTimeInForce
	}
	return OrderTimeInForce_GTC
}

func (m *OrderMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OrderMessage) GetSymbolId() uint64 {
	if m != nil {
		return m.SymbolId
	}
	return 0
}

func (m *OrderMessage) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderMessage) GetStopPrice() uint64 {
	if m != nil {
		return m.StopPrice
	}
	return 0
}

func (m *OrderMessage) GetTrailingAmount() uint64 {
	if m != nil {
		return m.TrailingAmount
	}
	return 0
}

func (m *OrderMessage) GetLastExecutedPrice() uint64 {
	if m != nil {
		return m.LastExecutedPrice
	}
	return 0
}

func (m *OrderMessage) GetQuantity() uint64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *OrderMessage) GetOpenQuantity() uint64 {
	if m != nil {
		return m.OpenQuantity
	}
	return 0
}

func (m *OrderMessage) GetLastExecutedQuantity() uint64 {
	if m != nil {
		return m.LastExecutedQuantity
	}
	return 0
}

type OrderResponseMessage struct {
	ExchangeStatus       string   `protobuf:"bytes,1,opt,name=exchangeStatus,proto3" json:"exchangeStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderResponseMessage) Reset()         { *m = OrderResponseMessage{} }
func (m *OrderResponseMessage) String() string { return proto.CompactTextString(m) }
func (*OrderResponseMessage) ProtoMessage()    {}
func (*OrderResponseMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0328a4f16f87ea1, []int{1}
}

func (m *OrderResponseMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderResponseMessage.Unmarshal(m, b)
}
func (m *OrderResponseMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderResponseMessage.Marshal(b, m, deterministic)
}
func (m *OrderResponseMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderResponseMessage.Merge(m, src)
}
func (m *OrderResponseMessage) XXX_Size() int {
	return xxx_messageInfo_OrderResponseMessage.Size(m)
}
func (m *OrderResponseMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderResponseMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OrderResponseMessage proto.InternalMessageInfo

func (m *OrderResponseMessage) GetExchangeStatus() string {
	if m != nil {
		return m.ExchangeStatus
	}
	return ""
}

func init() {
	proto.RegisterEnum("exchange.Command", Command_name, Command_value)
	proto.RegisterEnum("exchange.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("exchange.OrderTimeInForce", OrderTimeInForce_name, OrderTimeInForce_value)
	proto.RegisterEnum("exchange.Side", Side_name, Side_value)
	proto.RegisterType((*OrderMessage)(nil), "exchange.OrderMessage")
	proto.RegisterType((*OrderResponseMessage)(nil), "exchange.OrderResponseMessage")
}

func init() {
	proto.RegisterFile("exchange.proto", fileDescriptor_e0328a4f16f87ea1)
}

var fileDescriptor_e0328a4f16f87ea1 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x51, 0x8f, 0x9a, 0x4e,
	0x14, 0xc5, 0x05, 0x51, 0xe4, 0xea, 0xf2, 0x1f, 0xef, 0x9a, 0x7f, 0x89, 0x69, 0x9a, 0x8d, 0x0f,
	0x9b, 0x8d, 0xdd, 0x6e, 0x52, 0xfb, 0xd0, 0xb7, 0x26, 0x14, 0xd1, 0x12, 0x75, 0xb5, 0xc8, 0x53,
	0x5f, 0x36, 0xac, 0x4c, 0x5c, 0x12, 0x65, 0x28, 0x8c, 0xcd, 0xfa, 0x25, 0xfa, 0x99, 0x1b, 0x06,
	0x91, 0x2e, 0xdb, 0xb7, 0xb9, 0xe7, 0xfc, 0xce, 0xcc, 0x38, 0x1e, 0x40, 0xa7, 0xcf, 0x9b, 0x27,
	0x3f, 0xda, 0xd2, 0xbb, 0x38, 0x61, 0x9c, 0x61, 0xab, 0x98, 0x07, 0xbf, 0x15, 0xe8, 0x2c, 0x93,
	0x80, 0x26, 0x0b, 0x9a, 0xa6, 0xfe, 0x96, 0xe2, 0x7b, 0x50, 0x37, 0x6c, 0xbf, 0xf7, 0xa3, 0xc0,
	0x90, 0xae, 0xa4, 0x1b, 0x7d, 0xd4, 0xbd, 0x3b, 0x87, 0xad, 0xdc, 0x70, 0x0b, 0x02, 0x3f, 0x82,
	0xc6, 0xb2, 0xb0, 0x77, 0x8c, 0xa9, 0x21, 0x0b, 0xfc, 0xb2, 0xc4, 0x97, 0x85, 0xe5, 0x96, 0x14,
	0xde, 0x9e, 0x22, 0xeb, 0x30, 0xa0, 0x46, 0x5d, 0x44, 0xf4, 0x32, 0x92, 0xa9, 0x6e, 0x09, 0xe0,
	0x04, 0x48, 0x1e, 0x0d, 0xf7, 0xd4, 0x89, 0x26, 0x2c, 0xd9, 0x50, 0x43, 0x11, 0xa1, 0x7e, 0xf5,
	0x9c, 0x92, 0x70, 0x5f, 0x65, 0x50, 0x07, 0x39, 0x0c, 0x8c, 0xc6, 0x95, 0x74, 0xa3, 0xb8, 0x72,
	0x18, 0x60, 0x1f, 0x5a, 0xe9, 0x71, 0xff, 0xc8, 0x76, 0x4e, 0x60, 0x34, 0x85, 0x7a, 0x9e, 0xb1,
	0x07, 0x8d, 0x38, 0x09, 0x37, 0xd4, 0x50, 0x85, 0x91, 0x0f, 0xf8, 0x16, 0xb4, 0x94, 0xb3, 0x78,
	0x25, 0x9c, 0x96, 0x70, 0x4a, 0x01, 0xaf, 0x41, 0xe7, 0x89, 0x1f, 0xee, 0xc2, 0x68, 0x6b, 0xee,
	0xd9, 0x21, 0xe2, 0x86, 0x26, 0x90, 0x8a, 0x8a, 0xb7, 0xd0, 0xdd, 0xf9, 0x29, 0xb7, 0x9f, 0xe9,
	0xe6, 0xc0, 0x69, 0x90, 0xef, 0x06, 0x02, 0x7d, 0x6d, 0x64, 0xb7, 0xfc, 0x79, 0xf0, 0x23, 0x1e,
	0xf2, 0xa3, 0xd1, 0xce, 0x6f, 0x59, 0xcc, 0x38, 0x80, 0x0e, 0x8b, 0x69, 0xf4, 0xbd, 0xf0, 0x3b,
	0xc2, 0x7f, 0xa1, 0xe1, 0x08, 0x7a, 0x7f, 0x6f, 0x7a, 0x66, 0x2f, 0x04, 0xfb, 0x4f, 0x6f, 0xf0,
	0x05, 0x7a, 0xe2, 0x3d, 0x5d, 0x9a, 0xc6, 0x2c, 0x4a, 0x69, 0xd1, 0x8b, 0xeb, 0xb2, 0x44, 0x6b,
	0xee, 0xf3, 0x43, 0x2a, 0xea, 0xa1, 0xb9, 0x15, 0x75, 0xf8, 0x19, 0xd4, 0x53, 0x4d, 0x50, 0x85,
	0xba, 0x39, 0x1e, 0x93, 0x1a, 0x02, 0x34, 0xc7, 0xf6, 0xdc, 0xf6, 0x6c, 0x22, 0x61, 0x1b, 0x54,
	0xd7, 0x5e, 0xcd, 0x4d, 0xcb, 0x26, 0x72, 0x66, 0x58, 0xe6, 0xbd, 0x65, 0xcf, 0x49, 0x7d, 0xf8,
	0x04, 0xda, 0xb9, 0x30, 0xa8, 0x41, 0x63, 0xee, 0x2c, 0x1c, 0x2f, 0x0f, 0x2f, 0x4c, 0x77, 0x66,
	0x7b, 0x44, 0xc2, 0x16, 0x28, 0x6b, 0x6f, 0xb9, 0x22, 0x32, 0xea, 0x00, 0xd9, 0xea, 0x21, 0xa7,
	0xea, 0xd8, 0x85, 0x0b, 0xcf, 0x35, 0x9d, 0xb9, 0x73, 0x3f, 0x7d, 0x10, 0x88, 0x82, 0x6f, 0xe0,
	0xf2, 0x85, 0x74, 0x62, 0x1b, 0xc3, 0x0f, 0x40, 0xaa, 0x95, 0xc9, 0xee, 0x3a, 0xf5, 0x2c, 0x52,
	0xcb, 0x16, 0xce, 0xd2, 0x22, 0x52, 0xb6, 0x98, 0x2c, 0x67, 0x44, 0x1e, 0x1a, 0xa0, 0x88, 0x2e,
	0xaa, 0x50, 0xff, 0xea, 0x8c, 0x73, 0xc4, 0x5c, 0xcf, 0x88, 0x34, 0xfa, 0x01, 0xff, 0xd9, 0xc5,
	0xaf, 0xa7, 0xc9, 0xaf, 0xec, 0x2f, 0x9b, 0x42, 0xfb, 0x9b, 0x1f, 0x05, 0x3b, 0x2a, 0x4e, 0xc0,
	0xff, 0x2b, 0x2d, 0x3d, 0xbd, 0x66, 0xff, 0x5d, 0x45, 0xaf, 0xbc, 0xf6, 0xa0, 0xf6, 0xd8, 0x14,
	0x5f, 0xea, 0xa7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x87, 0x7f, 0x77, 0x0a, 0xbb, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExchangeServiceClient is the client API for ExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExchangeServiceClient interface {
	HandleOrder(ctx context.Context, in *OrderMessage, opts ...grpc.CallOption) (*OrderResponseMessage, error)
}

type exchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeServiceClient(cc grpc.ClientConnInterface) ExchangeServiceClient {
	return &exchangeServiceClient{cc}
}

func (c *exchangeServiceClient) HandleOrder(ctx context.Context, in *OrderMessage, opts ...grpc.CallOption) (*OrderResponseMessage, error) {
	out := new(OrderResponseMessage)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeService/HandleOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServiceServer is the server API for ExchangeService service.
type ExchangeServiceServer interface {
	HandleOrder(context.Context, *OrderMessage) (*OrderResponseMessage, error)
}

// UnimplementedExchangeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExchangeServiceServer struct {
}

func (*UnimplementedExchangeServiceServer) HandleOrder(ctx context.Context, req *OrderMessage) (*OrderResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOrder not implemented")
}

func RegisterExchangeServiceServer(s *grpc.Server, srv ExchangeServiceServer) {
	s.RegisterService(&_ExchangeService_serviceDesc, srv)
}

func _ExchangeService_HandleOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).HandleOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeService/HandleOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).HandleOrder(ctx, req.(*OrderMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExchangeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.ExchangeService",
	HandlerType: (*ExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleOrder",
			Handler:    _ExchangeService_HandleOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange.proto",
}
